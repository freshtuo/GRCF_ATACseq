import os.path

configfile: "config/config.EC-ZZ-6914.yaml"

def get_read1_file(wildcards):
    return config["read1"][wildcards.sample]

def get_read2_file(wildcards):
    return config["read2"][wildcards.sample]

project=config["project"]

def get_bam_files(wildcards):
    #return ','.join(['results/{}/sort_bam_by_name/{}.name_sorted.bam'.format(config["project"], x) for x in config["group"][wildcards.condition]])
    #return ['results/{}/sort_bam_by_name/{}.name_sorted.bam'.format(config["project"], x) for x in config["group"][wildcards.condition]]
    return ['results/{}/sort_bam_by_name/{}.name_sorted.bam'.format(project, x) for x in config["group"][wildcards.condition]]

#project=config["project"]

rule all:
    input:
        rawqc=expand("results/{project}/raw_fastq_qc/{sample}_R1_fastqc.html", project=config["project"], sample=config["read1"]),
        trimqc=expand("results/{project}/trim_fastq_qc/{sample}_R1.trimmed_fastqc.html", project=config["project"], sample=config["read1"]),
        bam=expand("results/{project}/remove_duplicates/{sample}.nodup.bam", project=config["project"], sample=config["read1"]),
        sortbam=expand("results/{project}/sort_bam_by_name/{sample}.name_sorted.bam", project=config["project"], sample=config["read1"]),
        bamqc=expand("results/{project}/atacseq_qc/report.{sample}.html", project=config["project"], sample=config["read1"]),
        manqc=expand("results/{project}/atacseq_qc/{sample}/fragment_length_count.{sample}.txt", project=config["project"], sample=config["read1"]),
        shiftbam=expand("results/{project}/shift_reads/{sample}.shifted.bam", project=config["project"], sample=config["read1"]),
        ###peakall=expand("results/{project}/call_peak_genrich/{condition}.narrowPeak.gz", project=config["project"], condition=config["group"]),
        peak=expand("results/{project}/call_peak_genrich_per_sample/{sample}.narrowPeak.gz", project=config["project"], sample=config["read1"]),
        ###diffbind=expand("results/{project}/differential_binding_analysis/report.DiffBind.html", project=config["project"]), 
        #diffbindpersample=expand("results/{project}/differential_binding_analysis_per_sample/report.DiffBind.persample.html", project=config["project"]),
        #annpersample=expand("results/{project}/annotate_peaks_per_sample/report.peaks.annotation.persample.html", project=config["project"]),
        bw=expand("results/{project}/bam_to_bigwig/{sample}.BPM.bw", project=config["project"], sample=config["read1"])

rule rename_fastq:
    input:
        read1=get_read1_file,
        read2=get_read2_file
    output:
        read1=temp("results/{project}/rename_fastq/{sample}_R1.fastq.gz"),
        read2=temp("results/{project}/rename_fastq/{sample}_R2.fastq.gz")
    shell:
        "cp {input.read1} {output.read1}; "
        "cp {input.read2} {output.read2}"

rule raw_fastq_qc:
    input:
        read1="results/{project}/rename_fastq/{sample}_R1.fastq.gz",
        read2="results/{project}/rename_fastq/{sample}_R2.fastq.gz"
    output:
        out1="results/{project}/raw_fastq_qc/{sample}_R1_fastqc.html",
        out2="results/{project}/raw_fastq_qc/{sample}_R2_fastqc.html"
    log:
        "results/{project}/logs/raw_fastq_qc/{sample}.log"
    conda:
        "../envs/fastqc.yaml"
    threads: 4
    shell:
        "fastqc --outdir results/{project}/raw_fastq_qc --threads {threads} --quiet {input.read1} {input.read2} >{log} 2>&1"

rule trim_adapter:
    input:
        read1="results/{project}/rename_fastq/{sample}_R1.fastq.gz",
        read2="results/{project}/rename_fastq/{sample}_R2.fastq.gz"
    output:
        read1=temp("results/{project}/trim_fastq/{sample}_R1.trimmed.fastq.gz"),
        read2=temp("results/{project}/trim_fastq/{sample}_R2.trimmed.fastq.gz")
    params:
        overlap=config["overlap"],
        adapter3=config["adapter3"],
        adapter5=config["adapter5"],
        minlen=config["minlen"],
        qscore=config["qscore"]
    log:
        "results/{project}/logs/trim_fastq/{sample}.log",
    threads: 4
    conda:
        "../envs/cutadapt.yaml"
    shell:
        "cutadapt -j {threads} -O {params.overlap} -m {params.minlen} -q {params.qscore} -a {params.adapter3} -A {params.adapter5} -o {output.read1} -p {output.read2} {input.read1} {input.read2} >{log} 2>&1; "

rule trim_fastq_qc:
    input:
        read1="results/{project}/trim_fastq/{sample}_R1.trimmed.fastq.gz",
        read2="results/{project}/trim_fastq/{sample}_R2.trimmed.fastq.gz"
    output:
        out1="results/{project}/trim_fastq_qc/{sample}_R1.trimmed_fastqc.html",
        out2="results/{project}/trim_fastq_qc/{sample}_R2.trimmed_fastqc.html"
    log:
        "results/{project}/logs/trim_fastq_qc/{sample}.log"
    conda:
        "../envs/fastqc.yaml"
    threads: 4
    shell:
        "fastqc --outdir results/{project}/trim_fastq_qc --threads {threads} --quiet {input.read1} {input.read2} >{log} 2>&1"

rule bowtie_align:
    input:
        read1="results/{project}/trim_fastq/{sample}_R1.trimmed.fastq.gz",
        read2="results/{project}/trim_fastq/{sample}_R2.trimmed.fastq.gz"
    output:
        bam="results/{project}/bowtie_align/{sample}.sorted.bam",
        bai="results/{project}/bowtie_align/{sample}.sorted.bam.bai"
    params:
        refidx=config["refidx"],
        maxins=config["maxins"],
        multimap=config["multimap"]
    log:
        bam="results/{project}/logs/bowtie_align/{sample}.bowtie2.log",
        bai="results/{project}/logs/bowtie_align/{sample}.samtools.log"
    conda:
        "../envs/bowtie.yaml"
    threads: 8
    shell:
        "bowtie2 -X {params.maxins} --very-sensitive -k {params.multimap} --threads {threads} -x {params.refidx} -1 {input.read1} -2 {input.read2} 2>{log.bam} "
        "|samtools sort -@ {threads} -O BAM -T results/{project}/bowtie_align/{wildcards.sample}.tmp -o {output.bam} - >{log.bai};"
        "samtools index -@ {threads} {output.bam} >>{log.bai} 2>&1"

rule remove_duplicates:
    input:
        bam="results/{project}/bowtie_align/{sample}.sorted.bam",
        bai="results/{project}/bowtie_align/{sample}.sorted.bam.bai"
    output:
        bam="results/{project}/remove_duplicates/{sample}.nodup.bam",
        bai="results/{project}/remove_duplicates/{sample}.nodup.bai",
        metric="results/{project}/remove_duplicates/{sample}.metrics"
    log: "results/{project}/logs/remove_duplicates/{sample}.picard.log"
    conda:
        "../envs/picard.yaml"
    shell:
        "picard MarkDuplicates QUIET=true INPUT={input.bam} OUTPUT={output.bam} METRICS_FILE={output.metric} "
        "REMOVE_DUPLICATES=true ASSUME_SORTED=true CREATE_INDEX=true VALIDATION_STRINGENCY=LENIENT TMP_DIR=results/{project}/remove_duplicates >{log} 2>&1"

rule shift_reads:
    input:
        bam="results/{project}/remove_duplicates/{sample}.nodup.bam",
        bai="results/{project}/remove_duplicates/{sample}.nodup.bai"
    output:
        tmpbam=temp("results/{project}/shift_reads/{sample}.unsorted.bam"),
        bam="results/{project}/shift_reads/{sample}.shifted.bam",
        bai="results/{project}/shift_reads/{sample}.shifted.bam.bai"
    log: "results/{project}/logs/shift_reads/{sample}.log"
    resources:
        tmpdir="results/{project}/shift_reads/tmp{sample}"
    conda:
        "../envs/deeptools.yaml"
    threads: 8
    shell:
        "alignmentSieve --numberOfProcessors {threads} --ATACshift --bam {input.bam} -o {output.tmpbam} >{log} 2>&1; "
        "samtools sort -@ {threads} -O BAM -T results/{project}/shift_reads/{wildcards.sample}.tmp -o {output.bam} {output.tmpbam} >>{log} 2>&1; "
        "samtools index -@ {threads} {output.bam} >>{log} 2>&1; "

rule atacseq_qc:
    input:
        bam="results/{project}/remove_duplicates/{sample}.nodup.bam",
        bai="results/{project}/remove_duplicates/{sample}.nodup.bai"
    output:
        "results/{project}/atacseq_qc/report.{sample}.html"
    log:
        "results/{project}/logs/atacseq_qc/{sample}.log"
    resources:
        tmpdir="results/{project}/atacseq_qc/tmp{sample}"
    conda:
        "../envs/atacseqqc.yaml"
    script:
        "../scripts/ATACseqQC.Rmd"

rule atacseq_qc_v2:
    input:
        rawbam="results/{project}/bowtie_align/{sample}.sorted.bam",
        filtbam="results/{project}/remove_duplicates/{sample}.nodup.bam",
        peak="results/{project}/call_peak_genrich_per_sample/{sample}.narrowPeak.gz"
    output:
        frag="results/{project}/atacseq_qc/{sample}/fragment_length_count.{sample}.txt",
        mito="results/{project}/atacseq_qc/{sample}/mito_content.{sample}.txt",
        tmpbam=temp("results/{project}/atacseq_qc/{sample}/{sample}.primary.name_sorted.bam"),
        lib="results/{project}/atacseq_qc/{sample}/library_complexity.{sample}.txt",
        frip="results/{project}/atacseq_qc/{sample}/frip.{sample}.txt"
    log: "results/{project}/logs/atacseq_qc/{sample}.manual.log"
    threads: 8
    conda:
        "../envs/bedtools.yaml"
    shell:
        "sh scripts/manual_bam_qc.sh {wildcards.sample} {input.rawbam} {input.filtbam} {input.peak} results/{project}/atacseq_qc/{wildcards.sample} >{log} 2>&1"

rule sort_bam_by_name:
    input:
        bam="results/{project}/remove_duplicates/{sample}.nodup.bam",
        bai="results/{project}/remove_duplicates/{sample}.nodup.bai"
    output:
        bam="results/{project}/sort_bam_by_name/{sample}.name_sorted.bam"
    log: "results/{project}/logs/sort_bam_by_name/{sample}.log"
    conda:
        "../envs/bowtie.yaml"
    threads: 8
    shell:
        "samtools sort -@ {threads} -O BAM -T results/{project}/sort_bam_by_name/{wildcards.sample}.tmp -n -o {output.bam} {input.bam} >{log} 2>&1"

rule call_peak_genrich:
    input:
        bam=get_bam_files
    output:
        peak="results/{project}/call_peak_genrich/{condition}.narrowPeak.gz",
        log="results/{project}/call_peak_genrich/{condition}.log.gz"
    params:
        exchrs=config["exchrs"],
        exregs=config["exregs"],
        qcut=config["qcut"],
        acut=config["acut"]
    log: "results/{project}/logs/call_peak_genrich/{condition}.log"
    conda:
        "../envs/genrich.yaml"
    shell:
        "Genrich -j -t '{input.bam}' -o {output.peak} -f {output.log} -z -v "
        "-e {params.exchrs} -E {params.exregs} -q {params.qcut} -a {params.acut} >{log} 2>&1"

rule call_peak_genrich_per_sample:
    input:
        bam="results/{project}/sort_bam_by_name/{sample}.name_sorted.bam"
    output:
        peak="results/{project}/call_peak_genrich_per_sample/{sample}.narrowPeak.gz"
    params:
        exchrs=config["exchrs"],
        exregs=config["exregs"],
        qcut=config["qcut"],
        acut=config["acut"]
    log: "results/{project}/logs/call_peak_genrich_per_sample/{sample}.log"
    conda:
        "../envs/genrich.yaml"
    shell:
        "Genrich -j -t {input.bam} -o {output.peak} -z -v "
        "-e {params.exchrs} -E {params.exregs} -q {params.qcut} -a {params.acut} >{log} 2>&1"

rule differential_binding_analysis:
    input:
        bam=expand("results/{project}/remove_duplicates/{sample}.nodup.bam", project=config["project"], sample=config["read1"]),
        bai=expand("results/{project}/remove_duplicates/{sample}.nodup.bai", project=config["project"], sample=config["read1"]),
        peak=expand("results/{project}/call_peak_genrich/{condition}.narrowPeak.gz", project=config["project"], condition=config["group"])
    output:
        "results/{project}/differential_binding_analysis/report.DiffBind.html"
    log:
        "results/{project}/logs/differential_binding_analysis/DiffBind.log"
    threads: 8
    conda:
        "../envs/diffbind.yaml"
    script:
        "../scripts/DiffBind.Rmd"

rule differential_binding_analysis_per_sample:
    input:
        bam=expand("results/{project}/remove_duplicates/{sample}.nodup.bam", project=config["project"], sample=config["read1"]),
        bai=expand("results/{project}/remove_duplicates/{sample}.nodup.bai", project=config["project"], sample=config["read1"]),
        peak=expand("results/{project}/call_peak_genrich_per_sample/{sample}.narrowPeak.gz", project=config["project"], sample=config["read1"])
    output:
        "results/{project}/differential_binding_analysis_per_sample/report.DiffBind.persample.html"
    log:
        "results/{project}/logs/differential_binding_analysis_per_sample/DiffBind.persample.log"
    threads: 8
    conda:
        "../envs/diffbind.yaml"
    script:
        "../scripts/DiffBind_persample.Rmd"

rule annotate_peaks_per_sample:
    input:
        peak=expand("results/{project}/call_peak_genrich_per_sample/{sample}.narrowPeak.gz", project=config["project"], sample=config["read1"]),
        de="results/{project}/differential_binding_analysis_per_sample/report.DiffBind.persample.html"
    output:
        "results/{project}/annotate_peaks_per_sample/report.peaks.annotation.persample.html"
    log:
        "results/{project}/logs/annotate_peaks_per_sample/peaks.annotation.persample.log"
    conda:
        "../envs/chipseeker.yaml"
    script:
        "../scripts/annotate_peaks_persample.Rmd"

rule bam_to_bigwig:
    input:
        bam="results/{project}/shift_reads/{sample}.shifted.bam",
        bai="results/{project}/shift_reads/{sample}.shifted.bam.bai"
    output:
        "results/{project}/bam_to_bigwig/{sample}.BPM.bw"
    log:
        "results/{project}/logs/bam_to_bigwig/{sample}.log"
    resources:
        tmpdir="results/{project}/bam_to_bigwig/tmp{sample}"
    threads: 4
    conda:
        "../envs/deeptools.yaml"
    shell:
        "bamCoverage --bam {input.bam} --outFileName {output} --outFileFormat bigwig "
        "--binSize 20 --normalizeUsing BPM "
        "--ignoreForNormalization MT "
        "--numberOfProcessors {threads} >{log} 2>&1 "

